"""
Detector de Anomalias com Machine Learning
Identifica automaticamente dados at√≠picos em datasets
"""

import streamlit as st
import pandas as pd
import numpy as np
import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots
import io

# Bibliotecas de Machine Learning
from sklearn.ensemble import IsolationForest
from sklearn.preprocessing import StandardScaler
from sklearn.covariance import EllipticEnvelope
from scipy import stats

# Importar configura√ß√µes
import sys
sys.path.append('..')
from config import (
    configurar_pagina, aplicar_estilo_global, criar_header, 
    criar_divider, criar_botao_download_excel, criar_botao_download_csv
)

# Configura√ß√£o da p√°gina
configurar_pagina("Detector de Anomalias", "üîç")
aplicar_estilo_global()

# Estilos adicionais
st.markdown("""
    <style>
    .anomaly-card {
        padding: 1.5rem;
        border-radius: 12px;
        margin: 1rem 0;
        box-shadow: 0 4px 15px rgba(0,0,0,0.08);
    }
    
    .method-selector {
        padding: 1rem;
        border-radius: 10px;
        margin: 0.5rem 0;
        cursor: pointer;
        transition: all 0.3s ease;
        border: 2px solid transparent;
    }
    
    .method-selector:hover {
        transform: translateY(-2px);
        border-color: #667eea;
    }
    
    .method-selected {
        border-color: #667eea;
        background: rgba(102, 126, 234, 0.1);
    }
    
    .stat-box {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 1.5rem;
        border-radius: 10px;
        text-align: center;
        margin: 0.5rem 0;
    }
    
    .stat-box h3 {
        color: white;
        margin: 0;
        font-size: 2rem;
    }
    
    .stat-box p {
        color: rgba(255,255,255,0.9);
        margin: 0.5rem 0 0 0;
    }
    
    .anomaly-badge {
        background: #dc3545;
        color: white;
        padding: 0.3rem 0.8rem;
        border-radius: 20px;
        font-size: 0.85rem;
        font-weight: 600;
    }
    
    .normal-badge {
        background: #28a745;
        color: white;
        padding: 0.3rem 0.8rem;
        border-radius: 20px;
        font-size: 0.85rem;
        font-weight: 600;
    }
    </style>
""", unsafe_allow_html=True)

# Cabe√ßalho
criar_header("üîç Detector de Anomalias", "Identifique automaticamente dados at√≠picos com Machine Learning")

# Inicializar session_state
if 'df_anomalias' not in st.session_state:
    st.session_state.df_anomalias = None
if 'resultados_deteccao' not in st.session_state:
    st.session_state.resultados_deteccao = None
if 'metodo_selecionado' not in st.session_state:
    st.session_state.metodo_selecionado = None

# ========================================
# FUN√á√ïES DE DETEC√á√ÉO
# ========================================

def detectar_anomalias_iqr(df, coluna, multiplicador=1.5):
    """Detec√ß√£o usando Intervalo Interquartil (IQR)"""
    Q1 = df[coluna].quantile(0.25)
    Q3 = df[coluna].quantile(0.75)
    IQR = Q3 - Q1
    
    limite_inferior = Q1 - multiplicador * IQR
    limite_superior = Q3 + multiplicador * IQR
    
    anomalias = (df[coluna] < limite_inferior) | (df[coluna] > limite_superior)
    
    return anomalias, limite_inferior, limite_superior

def detectar_anomalias_zscore(df, coluna, threshold=3):
    """Detec√ß√£o usando Z-Score"""
    z_scores = np.abs(stats.zscore(df[coluna].dropna()))
    anomalias = z_scores > threshold
    
    # Ajustar para o tamanho original
    resultado = pd.Series([False] * len(df), index=df.index)
    resultado.loc[df[coluna].notna()] = anomalias
    
    return resultado

def detectar_anomalias_isolation_forest(df, colunas, contaminacao=0.1):
    """Detec√ß√£o usando Isolation Forest"""
    # Preparar dados
    X = df[colunas].copy()
    
    # Remover NaN
    mask_valido = X.notna().all(axis=1)
    X_clean = X[mask_valido]
    
    if len(X_clean) == 0:
        return pd.Series([False] * len(df), index=df.index)
    
    # Normalizar
    scaler = StandardScaler()
    X_scaled = scaler.fit_transform(X_clean)
    
    # Detectar
    iso_forest = IsolationForest(contamination=contaminacao, random_state=42)
    predicoes = iso_forest.fit_predict(X_scaled)
    
    # Criar s√©rie de resultados
    resultado = pd.Series([False] * len(df), index=df.index)
    resultado.loc[mask_valido] = predicoes == -1
    
    return resultado

def detectar_anomalias_elliptic(df, colunas, contaminacao=0.1):
    """Detec√ß√£o usando Elliptic Envelope"""
    X = df[colunas].copy()
    
    mask_valido = X.notna().all(axis=1)
    X_clean = X[mask_valido]
    
    if len(X_clean) < 2:
        return pd.Series([False] * len(df), index=df.index)
    
    try:
        scaler = StandardScaler()
        X_scaled = scaler.fit_transform(X_clean)
        
        envelope = EllipticEnvelope(contamination=contaminacao, random_state=42)
        predicoes = envelope.fit_predict(X_scaled)
        
        resultado = pd.Series([False] * len(df), index=df.index)
        resultado.loc[mask_valido] = predicoes == -1
        
        return resultado
    except:
        return pd.Series([False] * len(df), index=df.index)

# ========================================
# UPLOAD DE DADOS
# ========================================

st.markdown("### üì§ Upload dos Dados")

col1, col2 = st.columns([3, 1])

with col1:
    arquivo = st.file_uploader(
        "Selecione o arquivo (CSV ou Excel)",
        type=["csv", "xlsx", "xls"],
        help="Fa√ßa upload do arquivo com os dados para an√°lise"
    )

with col2:
    st.markdown("<br>", unsafe_allow_html=True)
    usar_exemplo = st.button("üé≤ Usar Exemplo", use_container_width=True, type="primary")

# Processar dados de exemplo
if usar_exemplo:
    np.random.seed(42)
    n_samples = 200
    
    # Dados normais
    valores_normais = np.random.normal(100, 15, n_samples - 20)
    
    # Adicionar anomalias
    anomalias = np.random.uniform(150, 200, 10)
    anomalias_baixas = np.random.uniform(20, 40, 10)
    
    valores = np.concatenate([valores_normais, anomalias, anomalias_baixas])
    
    df_exemplo = pd.DataFrame({
        'ID': range(1, len(valores) + 1),
        'Valor': valores,
        'Categoria': np.random.choice(['A', 'B', 'C'], len(valores)),
        'Data': pd.date_range('2024-01-01', periods=len(valores), freq='D')
    })
    
    st.session_state.df_anomalias = df_exemplo
    st.success("‚úÖ Dados de exemplo carregados! (200 registros com 20 anomalias)")
    st.rerun()

# Processar upload
if arquivo and st.session_state.df_anomalias is None:
    try:
        if arquivo.name.endswith('.csv'):
            df = pd.read_csv(arquivo)
        else:
            df = pd.read_excel(arquivo)
        
        st.session_state.df_anomalias = df
        st.success(f"‚úÖ Arquivo carregado: {len(df)} registros, {len(df.columns)} colunas")
        st.rerun()
    
    except Exception as e:
        st.error(f"‚ùå Erro ao carregar arquivo: {str(e)}")

if st.session_state.df_anomalias is not None:
    df = st.session_state.df_anomalias
    
    criar_divider()
    
    # Informa√ß√µes do dataset
    st.markdown("### üìä Informa√ß√µes do Dataset")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("üìÑ Registros", f"{len(df):,}")
    with col2:
        st.metric("üìã Colunas", f"{len(df.columns):,}")
    with col3:
        colunas_numericas = df.select_dtypes(include=[np.number]).columns
        st.metric("üî¢ Colunas Num√©ricas", len(colunas_numericas))
    with col4:
        st.metric("üíæ Mem√≥ria", f"{df.memory_usage(deep=True).sum() / 1024:.1f} KB")
    
    criar_divider()
    
    # Preview dos dados
    with st.expander("üëÅÔ∏è Preview dos Dados", expanded=False):
        st.dataframe(df.head(10), use_container_width=True)
    
    criar_divider()
    
    # ========================================
    # CONFIGURA√á√ÉO DA DETEC√á√ÉO
    # ========================================
    
    st.markdown("### ‚öôÔ∏è Configura√ß√£o da Detec√ß√£o")
    
    # Sele√ß√£o de m√©todo
    st.markdown("#### üéØ M√©todo de Detec√ß√£o")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        if st.button("üìä IQR\n(Interquartil)", use_container_width=True, 
                    type="primary" if st.session_state.metodo_selecionado == "IQR" else "secondary"):
            st.session_state.metodo_selecionado = "IQR"
            st.rerun()
    
    with col2:
        if st.button("üìà Z-Score\n(Estat√≠stico)", use_container_width=True,
                    type="primary" if st.session_state.metodo_selecionado == "ZScore" else "secondary"):
            st.session_state.metodo_selecionado = "ZScore"
            st.rerun()
    
    with col3:
        if st.button("ü§ñ Isolation Forest\n(ML)", use_container_width=True,
                    type="primary" if st.session_state.metodo_selecionado == "IsolationForest" else "secondary"):
            st.session_state.metodo_selecionado = "IsolationForest"
            st.rerun()
    
    with col4:
        if st.button("üéØ Elliptic Envelope\n(ML)", use_container_width=True,
                    type="primary" if st.session_state.metodo_selecionado == "Elliptic" else "secondary"):
            st.session_state.metodo_selecionado = "Elliptic"
            st.rerun()
    
    # Descri√ß√£o dos m√©todos
    if st.session_state.metodo_selecionado:
        criar_divider()
        
        descricoes = {
            "IQR": """
            **üìä Intervalo Interquartil (IQR)**
            - M√©todo estat√≠stico cl√°ssico
            - Baseado em quartis (Q1 e Q3)
            - Ideal para distribui√ß√µes unimodais
            - R√°pido e interpret√°vel
            - Melhor para dados univariados
            """,
            "ZScore": """
            **üìà Z-Score**
            - Mede desvio da m√©dia em desvios-padr√£o
            - Assume distribui√ß√£o normal
            - Threshold t√≠pico: 3 desvios
            - Sens√≠vel a outliers extremos
            - Simples e eficiente
            """,
            "IsolationForest": """
            **ü§ñ Isolation Forest**
            - Algoritmo de Machine Learning
            - N√£o assume distribui√ß√£o espec√≠fica
            - Excelente para dados multivariados
            - Detecta anomalias complexas
            - Recomendado para datasets grandes
            """,
            "Elliptic": """
            **üéØ Elliptic Envelope**
            - Assume distribui√ß√£o gaussiana multivariada
            - Cria envelope el√≠ptico dos dados normais
            - Bom para correla√ß√µes entre vari√°veis
            - Robusto a ru√≠do
            - Ideal para 2+ dimens√µes
            """
        }
        
        st.info(descricoes[st.session_state.metodo_selecionado])
    
    criar_divider()
    
    # Sele√ß√£o de colunas
    st.markdown("#### üéØ Sele√ß√£o de Colunas para An√°lise")
    
    colunas_numericas = df.select_dtypes(include=[np.number]).columns.tolist()
    
    if not colunas_numericas:
        st.error("‚ùå Nenhuma coluna num√©rica encontrada no dataset")
    else:
        if st.session_state.metodo_selecionado in ["IQR", "ZScore"]:
            # M√©todos univariados
            coluna_analise = st.selectbox(
                "Selecione a coluna para an√°lise",
                colunas_numericas,
                help="An√°lise ser√° feita nesta coluna"
            )
        else:
            # M√©todos multivariados
            colunas_analise = st.multiselect(
                "Selecione as colunas para an√°lise",
                colunas_numericas,
                default=colunas_numericas[:3] if len(colunas_numericas) >= 3 else colunas_numericas,
                help="Selecione uma ou mais colunas para an√°lise multivariada"
            )
        
        criar_divider()
        
        # Par√¢metros espec√≠ficos
        st.markdown("#### ‚öôÔ∏è Par√¢metros de Detec√ß√£o")
        
        col1, col2 = st.columns(2)
        
        with col1:
            if st.session_state.metodo_selecionado == "IQR":
                multiplicador_iqr = st.slider(
                    "Multiplicador IQR",
                    min_value=1.0,
                    max_value=3.0,
                    value=1.5,
                    step=0.1,
                    help="Quanto maior, menos sens√≠vel (1.5 √© padr√£o)"
                )
            
            elif st.session_state.metodo_selecionado == "ZScore":
                threshold_zscore = st.slider(
                    "Threshold Z-Score",
                    min_value=2.0,
                    max_value=4.0,
                    value=3.0,
                    step=0.1,
                    help="N√∫mero de desvios-padr√£o (3 √© padr√£o)"
                )
            
            elif st.session_state.metodo_selecionado in ["IsolationForest", "Elliptic"]:
                contaminacao = st.slider(
                    "Taxa de Contamina√ß√£o Esperada",
                    min_value=0.01,
                    max_value=0.30,
                    value=0.10,
                    step=0.01,
                    format="%.2f",
                    help="Propor√ß√£o esperada de anomalias (10% √© padr√£o)"
                )
        
        with col2:
            st.markdown("**üí° Dicas:**")
            if st.session_state.metodo_selecionado == "IQR":
                st.markdown("""
                - 1.5: Mais sens√≠vel (mais anomalias)
                - 2.0-3.0: Menos sens√≠vel
                - Recomendado: 1.5 para maioria dos casos
                """)
            elif st.session_state.metodo_selecionado == "ZScore":
                st.markdown("""
                - 2.0: Muito sens√≠vel (5% de anomalias)
                - 3.0: Padr√£o (0.3% de anomalias)
                - 4.0: Pouco sens√≠vel
                """)
            else:
                st.markdown("""
                - 0.05: Poucos outliers esperados
                - 0.10: Propor√ß√£o moderada (padr√£o)
                - 0.20+: Muitos outliers esperados
                """)
        
        criar_divider()
        
        # Bot√£o de detec√ß√£o
        if st.button("üîç Detectar Anomalias", type="primary", use_container_width=True):
            with st.spinner("Processando detec√ß√£o..."):
                try:
                    df_resultado = df.copy()
                    
                    # Executar detec√ß√£o
                    if st.session_state.metodo_selecionado == "IQR":
                        anomalias, limite_inf, limite_sup = detectar_anomalias_iqr(
                            df_resultado, coluna_analise, multiplicador_iqr
                        )
                        df_resultado['Anomalia'] = anomalias
                        
                        info_metodo = {
                            'limite_inferior': limite_inf,
                            'limite_superior': limite_sup,
                            'coluna': coluna_analise
                        }
                    
                    elif st.session_state.metodo_selecionado == "ZScore":
                        anomalias = detectar_anomalias_zscore(
                            df_resultado, coluna_analise, threshold_zscore
                        )
                        df_resultado['Anomalia'] = anomalias
                        
                        info_metodo = {
                            'threshold': threshold_zscore,
                            'coluna': coluna_analise
                        }
                    
                    elif st.session_state.metodo_selecionado == "IsolationForest":
                        if not colunas_analise:
                            st.error("‚ùå Selecione pelo menos uma coluna")
                            st.stop()
                        
                        anomalias = detectar_anomalias_isolation_forest(
                            df_resultado, colunas_analise, contaminacao
                        )
                        df_resultado['Anomalia'] = anomalias
                        
                        info_metodo = {
                            'contaminacao': contaminacao,
                            'colunas': colunas_analise
                        }
                    
                    elif st.session_state.metodo_selecionado == "Elliptic":
                        if not colunas_analise or len(colunas_analise) < 2:
                            st.error("‚ùå Selecione pelo menos 2 colunas para Elliptic Envelope")
                            st.stop()
                        
                        anomalias = detectar_anomalias_elliptic(
                            df_resultado, colunas_analise, contaminacao
                        )
                        df_resultado['Anomalia'] = anomalias
                        
                        info_metodo = {
                            'contaminacao': contaminacao,
                            'colunas': colunas_analise
                        }
                    
                    # Salvar resultados
                    st.session_state.resultados_deteccao = {
                        'df': df_resultado,
                        'metodo': st.session_state.metodo_selecionado,
                        'info': info_metodo,
                        'n_anomalias': anomalias.sum(),
                        'n_normais': (~anomalias).sum(),
                        'percentual': (anomalias.sum() / len(df_resultado)) * 100
                    }
                    
                    st.success(f"‚úÖ Detec√ß√£o conclu√≠da! {anomalias.sum()} anomalia(s) encontrada(s)")
                    st.rerun()
                
                except Exception as e:
                    st.error(f"‚ùå Erro na detec√ß√£o: {str(e)}")
                    import traceback
                    st.code(traceback.format_exc())

# ========================================
# RESULTADOS
# ========================================

if st.session_state.resultados_deteccao:
    criar_divider()
    
    resultados = st.session_state.resultados_deteccao
    df_resultado = resultados['df']
    
    st.markdown("### üìä Resultados da Detec√ß√£o")
    
    # Estat√≠sticas
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.markdown(f"""
        <div class="stat-box">
            <h3>{resultados['n_anomalias']}</h3>
            <p>Anomalias Detectadas</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown(f"""
        <div class="stat-box" style="background: linear-gradient(135deg, #28a745 0%, #20c997 100%);">
            <h3>{resultados['n_normais']}</h3>
            <p>Dados Normais</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col3:
        st.markdown(f"""
        <div class="stat-box" style="background: linear-gradient(135deg, #ffc107 0%, #ff9800 100%);">
            <h3>{resultados['percentual']:.1f}%</h3>
            <p>Taxa de Anomalias</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col4:
        st.markdown(f"""
        <div class="stat-box" style="background: linear-gradient(135deg, #17a2b8 0%, #138496 100%);">
            <h3>{resultados['metodo']}</h3>
            <p>M√©todo Utilizado</p>
        </div>
        """, unsafe_allow_html=True)
    
    criar_divider()
    
    # Visualiza√ß√µes
    tabs = st.tabs(["üìä Visualiza√ß√µes", "üìã Dados Detalhados", "üí° Recomenda√ß√µes", "üì• Download"])
    
    with tabs[0]:
        st.markdown("### üìà Visualiza√ß√£o das Anomalias")
        
        # Gr√°fico 1: Scatter plot (univariado ou bivariado)
        if resultados['metodo'] in ["IQR", "ZScore"]:
            col_analise = resultados['info']['coluna']
            
            fig = go.Figure()
            
            # Dados normais
            df_normal = df_resultado[~df_resultado['Anomalia']]
            fig.add_trace(go.Scatter(
                x=df_normal.index,
                y=df_normal[col_analise],
                mode='markers',
                name='Normal',
                marker=dict(color='#28a745', size=8, opacity=0.6)
            ))
            
            # Anomalias
            df_anomalo = df_resultado[df_resultado['Anomalia']]
            fig.add_trace(go.Scatter(
                x=df_anomalo.index,
                y=df_anomalo[col_analise],
                mode='markers',
                name='Anomalia',
                marker=dict(color='#dc3545', size=12, symbol='x')
            ))
            
            # Limites (se IQR)
            if resultados['metodo'] == "IQR":
                fig.add_hline(
                    y=resultados['info']['limite_superior'],
                    line_dash="dash",
                    line_color="red",
                    annotation_text="Limite Superior"
                )
                fig.add_hline(
                    y=resultados['info']['limite_inferior'],
                    line_dash="dash",
                    line_color="red",
                    annotation_text="Limite Inferior"
                )
            
            fig.update_layout(
                title=f"Detec√ß√£o de Anomalias - {col_analise}",
                xaxis_title="√çndice",
                yaxis_title=col_analise,
                height=500,
                hovermode='closest'
            )
            
            st.plotly_chart(fig, use_container_width=True)
        
        else:
            # Gr√°fico bivariado para m√©todos ML
            colunas = resultados['info']['colunas']
            
            if len(colunas) >= 2:
                col1, col2 = colunas[0], colunas[1]
                
                fig = go.Figure()
                
                df_normal = df_resultado[~df_resultado['Anomalia']]
                fig.add_trace(go.Scatter(
                    x=df_normal[col1],
                    y=df_normal[col2],
                    mode='markers',
                    name='Normal',
                    marker=dict(color='#28a745', size=8, opacity=0.6)
                ))
                
                df_anomalo = df_resultado[df_resultado['Anomalia']]
                fig.add_trace(go.Scatter(
                    x=df_anomalo[col1],
                    y=df_anomalo[col2],
                    mode='markers',
                    name='Anomalia',
                    marker=dict(color='#dc3545', size=12, symbol='x')
                ))
                
                fig.update_layout(
                    title=f"Detec√ß√£o Multivariada - {col1} vs {col2}",
                    xaxis_title=col1,
                    yaxis_title=col2,
                    height=500
                )
                
                st.plotly_chart(fig, use_container_width=True)
        
        criar_divider()
        
        # Gr√°fico 2: Distribui√ß√£o
        st.markdown("### üìä Distribui√ß√£o dos Dados")
        
        col_plot = resultados['info'].get('coluna') or resultados['info']['colunas'][0]
        
        fig = make_subplots(rows=1, cols=2, subplot_titles=("Histograma", "Boxplot"))
        
        # Histograma
        fig.add_trace(
            go.Histogram(
                x=df_resultado[~df_resultado['Anomalia']][col_plot],
                name='Normal',
                marker_color='#28a745',
                opacity=0.7
            ),
            row=1, col=1
        )
        
        fig.add_trace(
            go.Histogram(
                x=df_resultado[df_resultado['Anomalia']][col_plot],
                name='Anomalia',
                marker_color='#dc3545',
                opacity=0.7
            ),
            row=1, col=1
        )
        
        # Boxplot
        fig.add_trace(
            go.Box(
                y=df_resultado[~df_resultado['Anomalia']][col_plot],
                name='Normal',
                marker_color='#28a745'
            ),
            row=1, col=2
        )
        
        fig.add_trace(
            go.Box(
                y=df_resultado[df_resultado['Anomalia']][col_plot],
                name='Anomalia',
                marker_color='#dc3545'
            ),
            row=1, col=2
        )
        
        fig.update_layout(height=400, showlegend=True)
        st.plotly_chart(fig, use_container_width=True)
    
    with tabs[1]:
        st.markdown("### üìã Registros com Anomalias")
        
        df_anomalias = df_resultado[df_resultado['Anomalia']].copy()
        
        if len(df_anomalias) > 0:
            st.dataframe(df_anomalias, use_container_width=True)
            
            criar_divider()
            
            st.markdown("### üìä Estat√≠sticas Comparativas")
            
            col_comparacao = resultados['info'].get('coluna') or resultados['info']['colunas'][0]
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown("**Dados Normais:**")
                st.dataframe(
                    df_resultado[~df_resultado['Anomalia']][col_comparacao].describe(),
                    use_container_width=True
                )
            
            with col2:
                st.markdown("**Anomalias:**")
                st.dataframe(
                    df_resultado[df_resultado['Anomalia']][col_comparacao].describe(),
                    use_container_width=True
                )
        else:
            st.info("‚úÖ Nenhuma anomalia detectada no dataset")
    
    with tabs[2]:
        st.markdown("### üí° Recomenda√ß√µes e Insights")
        
        if resultados['n_anomalias'] > 0:
            st.markdown(f"""
            #### üîç An√°lise Geral
            
            - **Total de anomalias:** {resultados['n_anomalias']} ({resultados['percentual']:.1f}% do dataset)
            - **M√©todo utilizado:** {resultados['metodo']}
            - **Dados normais:** {resultados['n_normais']}
            
            #### üéØ Poss√≠veis Causas das Anomalias
            
            1. **Erros de Coleta/Digita√ß√£o**
               - Valores digitados incorretamente
               - Falhas em sensores ou sistemas
               - Convers√£o de unidades incorreta
            
            2. **Eventos Reais At√≠picos**
               - Picos de demanda/vendas
               - Per√≠odos de baixa atividade
               - Eventos extraordin√°rios
            
            3. **Problemas T√©cnicos**
               - Duplica√ß√£o de registros
               - Valores default incorretos
               - Problemas de integra√ß√£o
            
            #### ‚úÖ A√ß√µes Recomendadas
            
            1. **Investigar registros an√¥malos individualmente**
            2. **Validar com fontes originais** se poss√≠vel
            3. **Considerar contexto do neg√≥cio** antes de remover
            4. **Documentar decis√µes** sobre tratamento
            5. **Criar regras de valida√ß√£o** para dados futuros
            
            #### ‚ö†Ô∏è Cuidados Importantes
            
            - **Nem toda anomalia √© erro:** Alguns outliers s√£o leg√≠timos
            - **Contexto importa:** Analise o significado dos dados
            - **N√£o remova automaticamente:** Investigue antes de excluir
            - **Considere sazonalidade:** Picos podem ser normais em certos per√≠odos
            """)
            
            # An√°lise espec√≠fica do m√©todo
            if resultados['metodo'] == "IQR":
                st.markdown(f"""
                #### üìä Detalhes do M√©todo IQR
                
                - **Limite Inferior:** {resultados['info']['limite_inferior']:.2f}
                - **Limite Superior:** {resultados['info']['limite_superior']:.2f}
                - **Coluna analisada:** {resultados['info']['coluna']}
                
                **Interpreta√ß√£o:** Valores fora desses limites foram considerados an√¥malos.
                """)
            
            elif resultados['metodo'] == "ZScore":
                st.markdown(f"""
                #### üìà Detalhes do M√©todo Z-Score
                
                - **Threshold:** {resultados['info']['threshold']} desvios-padr√£o
                - **Coluna analisada:** {resultados['info']['coluna']}
                
                **Interpreta√ß√£o:** Valores com Z-Score > {resultados['info']['threshold']} foram flagados.
                """)
            
            elif resultados['metodo'] in ["IsolationForest", "Elliptic"]:
                st.markdown(f"""
                #### ü§ñ Detalhes do M√©todo {resultados['metodo']}
                
                - **Taxa de contamina√ß√£o:** {resultados['info']['contaminacao']:.1%}
                - **Colunas analisadas:** {', '.join(resultados['info']['colunas'])}
                
                **Interpreta√ß√£o:** Algoritmo identificou padr√µes multivariados an√¥malos.
                """)
        
        else:
            st.success("""
            ‚úÖ **Nenhuma anomalia detectada!**
            
            Isso pode significar:
            - Dados de alta qualidade
            - Processo de coleta bem controlado
            - Par√¢metros de detec√ß√£o muito conservadores
            
            **Sugest√£o:** Experimente ajustar os par√¢metros para aumentar a sensibilidade.
            """)
    
    with tabs[3]:
        st.markdown("### üì• Download dos Resultados")
        
        st.info("üí° Exporte os dados com a coluna 'Anomalia' adicionada")
        
        col1, col2 = st.columns(2)
        
        with col1:
            # Excel
            output_excel = io.BytesIO()
            with pd.ExcelWriter(output_excel, engine='xlsxwriter') as writer:
                # Aba completa
                df_resultado.to_excel(writer, sheet_name='Dados Completos', index=False)
                
                # Aba s√≥ anomalias
                if len(df_resultado[df_resultado['Anomalia']]) > 0:
                    df_resultado[df_resultado['Anomalia']].to_excel(
                        writer, sheet_name='Apenas Anomalias', index=False
                    )
                
                # Aba de estat√≠sticas
                stats_df = pd.DataFrame({
                    'M√©trica': ['Total de Registros', 'Anomalias', 'Dados Normais', 'Taxa de Anomalias'],
                    'Valor': [
                        len(df_resultado),
                        resultados['n_anomalias'],
                        resultados['n_normais'],
                        f"{resultados['percentual']:.2f}%"
                    ]
                })
                stats_df.to_excel(writer, sheet_name='Estat√≠sticas', index=False)
            
            output_excel.seek(0)
            
            st.download_button(
                label="üì• Baixar Excel Completo",
                data=output_excel,
                file_name="deteccao_anomalias.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                use_container_width=True
            )
        
        with col2:
            # CSV
            csv = df_resultado.to_csv(index=False).encode('utf-8')
            
            st.download_button(
                label="üì• Baixar CSV",
                data=csv,
                file_name="deteccao_anomalias.csv",
                mime="text/csv",
                use_container_width=True
            )
        
        criar_divider()
        
        # Relat√≥rio resumido
        st.markdown("### üìÑ Relat√≥rio Resumido")
        
        relatorio = f"""
# RELAT√ìRIO DE DETEC√á√ÉO DE ANOMALIAS

## Informa√ß√µes Gerais
- **Data da An√°lise:** {pd.Timestamp.now().strftime('%d/%m/%Y %H:%M')}
- **M√©todo Utilizado:** {resultados['metodo']}
- **Total de Registros:** {len(df_resultado):,}

## Resultados
- **Anomalias Detectadas:** {resultados['n_anomalias']} ({resultados['percentual']:.2f}%)
- **Dados Normais:** {resultados['n_normais']} ({100 - resultados['percentual']:.2f}%)

## Par√¢metros da Detec√ß√£o
"""
        
        if resultados['metodo'] == "IQR":
            relatorio += f"""
- Coluna Analisada: {resultados['info']['coluna']}
- Limite Inferior: {resultados['info']['limite_inferior']:.2f}
- Limite Superior: {resultados['info']['limite_superior']:.2f}
"""
        elif resultados['metodo'] == "ZScore":
            relatorio += f"""
- Coluna Analisada: {resultados['info']['coluna']}
- Threshold Z-Score: {resultados['info']['threshold']}
"""
        else:
            relatorio += f"""
- Colunas Analisadas: {', '.join(resultados['info']['colunas'])}
- Taxa de Contamina√ß√£o: {resultados['info']['contaminacao']:.1%}
"""
        
        relatorio += """

## Recomenda√ß√µes
1. Investigar individualmente os registros flagados como an√¥malos
2. Validar com fontes originais quando poss√≠vel
3. Considerar contexto do neg√≥cio antes de tomar a√ß√µes
4. Documentar decis√µes sobre tratamento das anomalias

## Pr√≥ximos Passos
- [ ] Revisar anomalias detectadas
- [ ] Validar com respons√°veis pelos dados
- [ ] Decidir tratamento (corrigir, remover ou manter)
- [ ] Implementar regras de valida√ß√£o
"""
        
        st.download_button(
            label="üìÑ Baixar Relat√≥rio (TXT)",
            data=relatorio,
            file_name="relatorio_anomalias.txt",
            mime="text/plain",
            use_container_width=True
        )

else:
    st.info("üëÜ Fa√ßa upload de um arquivo ou use dados de exemplo para come√ßar")
    
    criar_divider()
    
    # Informa√ß√µes sobre os m√©todos
    st.markdown("### üìö Sobre os M√©todos de Detec√ß√£o")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("""
        #### üìä IQR (Intervalo Interquartil)
        
        **Como funciona:**
        - Calcula Q1 (25%) e Q3 (75%)
        - Define intervalo: Q1 - 1.5√óIQR a Q3 + 1.5√óIQR
        - Valores fora s√£o anomalias
        
        **Vantagens:**
        - ‚úÖ Simples e intuitivo
        - ‚úÖ Robusto a outliers moderados
        - ‚úÖ N√£o assume distribui√ß√£o normal
        
        **Quando usar:**
        - An√°lise univariada (1 coluna)
        - Dados com distribui√ß√£o assim√©trica
        - Necessidade de interpreta√ß√£o clara
        
        ---
        
        #### üìà Z-Score
        
        **Como funciona:**
        - Mede dist√¢ncia da m√©dia em desvios-padr√£o
        - Z = (x - Œº) / œÉ
        - |Z| > threshold = anomalia
        
        **Vantagens:**
        - ‚úÖ Estatisticamente fundamentado
        - ‚úÖ F√°cil interpreta√ß√£o
        - ‚úÖ R√°pido computacionalmente
        
        **Quando usar:**
        - Dados aproximadamente normais
        - Uma vari√°vel por vez
        - Threshold bem definido (geralmente 3)
        """)
    
    with col2:
        st.markdown("""
        #### ü§ñ Isolation Forest
        
        **Como funciona:**
        - Isola observa√ß√µes usando √°rvores aleat√≥rias
        - Anomalias s√£o isoladas mais rapidamente
        - Score baseado em profundidade de isolamento
        
        **Vantagens:**
        - ‚úÖ N√£o assume distribui√ß√£o
        - ‚úÖ Excelente para m√∫ltiplas dimens√µes
        - ‚úÖ Eficiente para grandes datasets
        - ‚úÖ Detecta padr√µes complexos
        
        **Quando usar:**
        - An√°lise multivariada (v√°rias colunas)
        - Distribui√ß√µes complexas/desconhecidas
        - Grandes volumes de dados
        - Anomalias n√£o-lineares
        
        ---
        
        #### üéØ Elliptic Envelope
        
        **Como funciona:**
        - Assume distribui√ß√£o gaussiana
        - Cria envelope el√≠ptico dos dados normais
        - Pontos fora do envelope = anomalias
        
        **Vantagens:**
        - ‚úÖ Captura correla√ß√µes entre vari√°veis
        - ‚úÖ Robusto a pequenas contamina√ß√µes
        - ‚úÖ Bom para dados multivariados
        
        **Quando usar:**
        - 2+ vari√°veis correlacionadas
        - Distribui√ß√£o aproximadamente normal
        - Quando correla√ß√µes importam
        """)
    
    criar_divider()
    
    # Guia de uso
    st.markdown("### üöÄ Como Usar o Detector")
    
    st.markdown("""
    #### Passo a Passo
    
    1. **üì§ Upload dos Dados**
       - Carregue arquivo CSV ou Excel
       - Ou use dados de exemplo para testar
    
    2. **üéØ Escolha o M√©todo**
       - IQR/Z-Score: Para an√°lise de uma coluna
       - Isolation Forest/Elliptic: Para m√∫ltiplas colunas
    
    3. **‚öôÔ∏è Configure Par√¢metros**
       - Selecione colunas para an√°lise
       - Ajuste sensibilidade conforme necessidade
    
    4. **üîç Execute a Detec√ß√£o**
       - Clique em "Detectar Anomalias"
       - Aguarde processamento
    
    5. **üìä Analise Resultados**
       - Visualize gr√°ficos e estat√≠sticas
       - Revise registros an√¥malos
       - Leia recomenda√ß√µes
    
    6. **üì• Exporte Resultados**
       - Baixe dados com flag de anomalia
       - Salve relat√≥rio de an√°lise
    
    #### üí° Dicas Importantes
    
    - **Comece conservador:** Use par√¢metros padr√£o primeiro
    - **Valide manualmente:** Nem toda anomalia √© erro
    - **Contexto importa:** Considere caracter√≠sticas do neg√≥cio
    - **Documente decis√µes:** Registre o que fez com anomalias
    - **Itere:** Ajuste par√¢metros se necess√°rio
    """)
    
    criar_divider()
    
    # Casos de uso
    st.markdown("### üéØ Casos de Uso Comuns")
    
    with st.expander("üí∞ Detec√ß√£o de Fraudes Financeiras"):
        st.markdown("""
        **Cen√°rio:** Identificar transa√ß√µes suspeitas
        
        **Recomenda√ß√£o:**
        - M√©todo: **Isolation Forest**
        - Colunas: Valor, hor√°rio, frequ√™ncia, localiza√ß√£o
        - Contamina√ß√£o: 0.01-0.05 (1-5%)
        
        **Por qu√™?**
        - Fraudes s√£o raras mas complexas
        - M√∫ltiplas vari√°veis envolvidas
        - Padr√µes n√£o-lineares
        """)
    
    with st.expander("üìä Controle de Qualidade Industrial"):
        st.markdown("""
        **Cen√°rio:** Identificar produtos defeituosos
        
        **Recomenda√ß√£o:**
        - M√©todo: **Z-Score** ou **IQR**
        - Colunas: Medidas de qualidade (peso, dimens√µes)
        - Threshold: 3 desvios (Z-Score)
        
        **Por qu√™?**
        - Medidas tendem a seguir distribui√ß√£o normal
        - Limites de especifica√ß√£o claros
        - Interpreta√ß√£o direta para operadores
        """)
    
    with st.expander("üè• An√°lise de Dados M√©dicos"):
        st.markdown("""
        **Cen√°rio:** Identificar exames at√≠picos
        
        **Recomenda√ß√£o:**
        - M√©todo: **Elliptic Envelope**
        - Colunas: M√∫ltiplos biomarcadores correlacionados
        - Contamina√ß√£o: 0.05-0.10
        
        **Por qu√™?**
        - Biomarcadores s√£o correlacionados
        - Distribui√ß√£o aproximadamente gaussiana
        - Anomalias multivariadas importantes
        """)
    
    with st.expander("üõí E-commerce: Detec√ß√£o de Comportamento An√¥malo"):
        st.markdown("""
        **Cen√°rio:** Identificar padr√µes suspeitos de compra
        
        **Recomenda√ß√£o:**
        - M√©todo: **Isolation Forest**
        - Colunas: Valor, quantidade, frequ√™ncia, hor√°rio
        - Contamina√ß√£o: 0.10
        
        **Por qu√™?**
        - Comportamentos variados
        - M√∫ltiplas dimens√µes relevantes
        - Padr√µes de fraude complexos
        """)

# Footer
criar_divider()
st.markdown("""
<div style='text-align: center; color: #666; padding: 1rem 0;'>
    <p>üîç Detector de Anomalias | Powered by Machine Learning</p>
</div>
""", unsafe_allow_html=True)